// Lab 5 Beta CPU
.include "nominal.jsim"
.include "stdcell.jsim"
*.include "lab5regfile.jsim" 
*.include "lab5pc.jsim"
*.include "lab5ctl.jsim"
.include "lab5checkoff.jsim"

//1 bit full adder (from Lab 2)
.subckt FA A B Cin S Cout
Xg01 A B o1 xor2
Xg02 o1 Cin S xor2
Xg03 Cin o1 o2 and2
Xg04 A B o3 and2
Xg05 o2 o3 Cout or2
.ends

//full adder
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n

Xxor B[31:0] ALUFN[0]#32 xb[31:0] xor2
Xadder1 A[0] xb[0] ALUFN[0] s[0] C[0] FA
Xadder2 A[31:1] xb[31:1] C[30:0] s[31:1] C[31:1] FA

*z
Xor1 s[15:0] s[31:16] ro1[15:0] or2
Xor2 ro1[7:0] ro1[15:8] ro2[7:0] or2
Xor3 ro2[3:0] ro2[7:4] ro3[3:0] or2
Xor4 ro3[1:0] ro3[3:2] ro4[1:0] or2
Xnor1 ro4[0] ro4[1] z nor2

*v & n
Xinv1 A[31] ai inverter
Xinv2 xb[31] bi inverter
Xinv3 s[31] si inverter

X1 A[31] xb[31] si x and3
X2 ai bi s[31] y and3
X3 x y v or2

.connect s[31] n
.ends

//half adder
.subckt halfAdder a[31:0] b[31:0] s[31:0]
XFA_1 0 a[0] b[0] s[0] c[0] FA
XFA_2 c[30:0] a[31:1] b[31:1] s[31:1] c[31:1] FA
.ends

//Boolean unit
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
Xmux A[31:0] B[31:0] ALUFN0#32 ALUFN1#32 ALUFN2#32 ALUFN3#32 boole[31:0] mux4
.ends

//compare unit
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
.connect cmp[31:1] 0

Xxornv v n vxorn xor2
Xorz vxorn z orz or2
Xmux ALUFN2 ALUFN1 0 vxorn z orz cmp0 mux4
.ends

//shifter
.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]
Xmux1 ALUFN0#32 A[31:0] A[0:31] mo1[31:0] mux2
Xmux2 ALUFN[1] 0 A[31] mo2 mux2

Xs1 B[4]#32 mo1[31:0] mo1[15:0] mo2#16 so1[31:0] mux2
Xs2 B[3]#32 so1[31:0] so1[23:0] mo2#8 so2[31:0] mux2
Xs3 B[2]#32 so2[31:0] so2[27:0] mo2#4 so3[31:0] mux2
Xs4 B[1]#32 so3[31:0] so3[29:0] mo2#2 so4[31:0] mux2
Xs5 B[0]#32 so4[31:0] so4[30:0] mo2 so5[31:0] mux2

Xshiftmux ALUFN0#32 so5[31:0] so5[0:31] shift[31:0] mux2
.ends

// ALU
.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
Xadd ALUFN0 A[31:0] B[31:0] o1[31:0] z v n  adder32
Xboole ALUFN[3:0] A[31:0] B[31:0] o2[31:0] boole32
Xshift ALUFN[1:0] A[31:0] B[4:0]  o3[31:0] shift32
Xcmp ALUFN[2:1] z v n o4[31:0] compare32
Xmux ALUFN[4]#32 ALUFN[5]#32 o1[31:0] o2[31:0] o3[31:0] o4[31:0] alu[31:0] mux4
.ends 

.subckt connecting A B
.connect A B 
.ends

******* BETA COMPONENTS *********

//PC
.subckt pc clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] c[15:0] ia[31:0] pc_plus_four[31:0] pcsxt[31:0]

Xpc31jt ia[31] jt[31] newPC31Bit and2

*Register to store PC address
Xpcreg pcResOut[31:0] clk#32 ia[31:0] dreg

*5 input mux
XmuxA pcsel[1]#32 pcsel[0]#32 pc_plus_four[31:0] newPC31Bit jt[30:2] 0#2 ia[31] pcsxt[30:0] illop[31:0] muxAout[31:0] mux4
XmuxB pcsel[2]#32 muxAout[31:0] xadr[31:0] muxBout[31:0] mux2
//Xmux2way reset#32 0#32 pc_plus_four[31:0] mux2wayOut[31:0] mux2

*Calculate PC+4
Xconstant 0#29 vdd 0#2 constantOut[31:0] connecting //constant: 4
Xadd_four ia[31:0] constantOut[31:0] add_four_out[31:0] halfAdder
Xpcplusfour ia[31] add_four_out[30:0] pc_plus_four[31:0] connecting

*Calculate PC+4+4*SXT[c]
XCalc4Sxt 0#14 ia[15:0] 0#2 sxtc[31:0] connecting
Xpcsxt sxtc[31:0] pc_plus_four[31:0] pcsxt[31:0] halfAdder

*Reset
XPCreset reset#32 muxBout[31:0] vdd 0#31 pcResOut[31:0] mux2

.ends

//REGFILE
.subckt regfile clk werf wasel ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] radata[31:0] rbdata[31:0]


*Read B address
XmuxBport ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2

*Check for R31 
*If ra or rb is 11111 (R31): returns 1
XcheckA_and4 ra[4:1] a4out and4
XcheckA_and2 ra[0] a4out is_Ra_31 and2
XcheckB_and4 ra2mux[4:1] b4out and4
XcheckB_and2 ra2mux[0] b4out is_Rb_31 and2

Xmux31A is_Ra_31#32 adata[31:0] 0#32 radata[31:0] mux2
Xmux31B is_Rb_31#32 bdata[31:0] 0#32 rbdata[31:0] mux2


*Write Port WA and XP
Xwaselmux wasel#5 rc[4:0] vdd#4 0 wasel_out[4:0] mux2
XwriteA vdd#4 0 XP[4:0] connecting
XwriteAA wasel#5 rc[4:0] XP[4:0] rcmux[4:0] mux2

Xregfile
+ vdd 0 0 ra[4:0] adata[31:0]     // A read port
+ vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port
+ 0 clk werf rc[4:0] wdata[31:0]  // write port
+ $memory width=32 nlocations=31


.ends

//Supervisor Bit for BEQ BNE
.subckt isSupervisor id[31:26] isSupervisorBB
Xinv id[31] supervisor_inv inverter
Xand0 supervisor_inv id[30:28] is_opcode and4
Xxor id[27:26] isSuperBB xor2
Xand1 is_opcode isSuperBB isSupervisorBB and2
.ends

//CU
.subckt ctl reset z irq id[31:26] pcsel[2:0] wasel ra2sel asel bsel alufn[5:0] wdsel[1:0] werf moe wr

*CU OPCODES
Xctl vdd 0 0 id[31:26]      // one read port
+ xpcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
+ $memory width=18 nlocations=64 contents=(
+   0b000000000000000000  // opcode = 0b000000
+   0b000000000000000000  // opcode = 0b000001
+   0b000000000000000000  // opcode = 0b000010
+   0b000000000000000000  // opcode = 0b000011
+   0b000000000000000000  // opcode = 0b000100
+   0b000000000000000000  // opcode = 0b000101
+   0b000000000000000000  // opcode = 0b000110
+   0b000000000000000000  // opcode = 0b000111

+   0b000000000000000000  // opcode = 0b001000
+   0b000000000000000000  // opcode = 0b001001
+   0b000000000000000000  // opcode = 0b001010
+   0b000000000000000000  // opcode = 0b001011
+   0b000000000000000000  // opcode = 0b001100
+   0b000000000000000000  // opcode = 0b001101
+   0b000000000000000000  // opcode = 0b001110
+   0b000000000000000000  // opcode = 0b001111

+   0b000000000000000000  // opcode = 0b010000
+   0b000000000000000000  // opcode = 0b010001
+   0b000000000000000000  // opcode = 0b010010
+   0b000000000000000000  // opcode = 0b010011
+   0b000000000000000000  // opcode = 0b010100
+   0b000000000000000000  // opcode = 0b010101
+   0b000000000000000000  // opcode = 0b010110
+   0b000000000000000000  // opcode = 0b010111

+  0b000000100000010110  // opcode = 0b011000 LD
+  0b000001100000000001  // opcode = 0b011001 ST
+  0b000000000000000000  // opcode = 0b011010
+  0b000000000000000000  // opcode = 0b011011 JMP
+  0b000000000000000000  // opcode = 0b000000
+  0b000000000000000100  // opcode = 0b000001 BEQ
+  0b000000000000000000  // opcode = 0b000010 BNE
+  0b000000000000000000  // opcode = 0b000011 LDR

+  0b000000000000001100  // opcode = 0b100000 ADD
+  0b000000000000101100  // opcode = 0b100001 SUB
+  0b000000000000000000  // opcode = 0b100010 MUL
+  0b000000000000000000  // opcode = 0b100011 DIV
+  0b000000011001101100  // opcode = 0b100100 CMPEQ
+  0b000000011010101100  // opcode = 0b100101 CMPLT
+  0b000000011011101100  // opcode = 0b100110 CMPLE
+  0b000000000000000000  // opcode = 0b100111

+  0b000000001100001100  // opcode = 0b101000 AND
+  0b000000001111001100  // opcode = 0b101001 OR
+  0b000000001011001100  // opcode = 0b101010 XOR
+  0b000000000000000000  // opcode = 0b101011
+  0b000000010000001100  // opcode = 0b101100 SHL
+  0b000000010000101100  // opcode = 0b101101 SHR
+  0b000000010001101100  // opcode = 0b101110 SRA
+  0b000000000000000000  // opcode = 0b101111

+  0b000000100000001100  // opcode = 0b110000 ADDC
+  0b000000100000101100  // opcode = 0b110001 SUBC
+  0b000000000000000000  // opcode = 0b110010 MULC
+  0b000000000000000000  // opcode = 0b110011 DIVC
+  0b000000111001101100  // opcode = 0b110100 CMPEQC
+  0b000000111010101100  // opcode = 0b110101 CMPLTC
+  0b000000111011101100  // opcode = 0b110110 CMPLEC
+  0b000000000000000000  // opcode = 0b110111

+  0b000000101100001100  // opcode = 0b111000 ANDC
+  0b000000101111001100  // opcode = 0b111001 ORC
+  0b000000101011001100  // opcode = 0b111010 XORC
+  0b000000000000000000  // opcode = 0b111011
+  0b000000110000001100  // opcode = 0b111100 SHLC
+  0b000000110000101100  // opcode = 0b111101 SHRC
+  0b000000110001101100  // opcode = 0b111110 SRAC
+  0b000000000000000000  // opcode = 0b111111
+  )

//reset mux
Xreset_mux reset xwr 0 wr mux2

// Check for BEQ: OPCODE 011101
Xinv_i31 id31 id31_inv inverter
Xinv_id27 id27 id27_inv inverter
Xand4BEQ id31_inv id30 id29 id28 and4_BEQout and4
XisBEQ and4_BEQout id27_inv id26 isBEQ and3

//Check for BNE: OPCODE 011110
Xinv_id26 id26 id26_inv inverter
Xand4BNE id31_inv id30 id29 id28 and4_BNEout and4
XisBNE and4_BNEout id27 id26_inv isBNE and3

//Check for supervisor
XSuper id[31:26] superBeqOrBne isSupervisor
XPCSELnew z id[27] pcselnew xor2
XPCSELfinal superBeqOrBne#3 xpcsel[2:0] 0#2 pcselnew pcselfinal[2:0] mux2

//disconnect in step 2
//.connect z 0 

//XPCSEL BNE/BEQ postprocessing
Xz_BNEmux z#3 xpcsel[2:0] 0#3 pcsel_bne[2:0] mux2
Xz_BEQmux z#3 xpcsel[2:0] 0#2 vdd pcsel_beq[2:0] mux2

//PCSEL Overall postprocessing
.connect isBEQ muxsel[0]
.connect isBNE muxsel[1]
Xpcselmux muxsel[0:1]#3 xpcsel[2:0] pcsel_beq[2:0] pcsel_bne[2:0] 0#3 pcsel[2:0] mux4 

.ends

//beta
.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

Xmode ia[31] mode_inv inverter
XallowIRQ irq mode_inv allowIRQ and2

Xxadr vdd 0#27 vdd 0#3 xadr[31:0] connecting
Xillop vdd 0#28 vdd 0#2 illop[31:0] connecting

XPCSEL_two allowIRQ#3 xpcsel[2:0] vdd 0#2 pcsel[2:0] mux2
XWASEL allowIRQ xWASEL vdd wasel mux2
XWERF allowIRQ xWERF vdd werf mux2
XWDSEL allowIRQ#2 xWDSEL[1:0] 0#2 wdsel[1:0] mux2
XWR allowIRQ xWR 0 wr mux2

Xmwd rbdata[31:0] mwd[31:0] buffer
Xma aluOut[31:0] ma[31:0] buffer

//beta components
XpcBeta clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] id[15:0] ia[31:0] pc_plus_four[31:0] pcsxt[31:0] pc
XregfileBeta clk werf ra2sel wasel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] rbdata[31:0] regfile
XctlBeta reset z irq id[31:26] xpcsel[2:0] xwasel ra2sel asel bsel alufn[5:0] xwdsel[1:0] xwerf moe xwr ctl

Xalubeta alufn[5:0] aluA[31:0] aluB[31:0] aluOut[31:0] zvn[2:0] alu

//JT and Z
XradataZ 0 radata[31:0] 0#32 raZcin[31:0] z raZcout[1:0] adder32
XradataJT radata[31:0] jt[31:0] connecting

Xasel asel#32 radata[31:0] 0 pcsxt[30:0] aluA[31:0] mux2
Xbsel bsel#32 rbdata[31:0] id[15]#16 id[15:0] aluB[31:0] mux2
XwdselBeta wdsel[1]#32 wdsel[0]#32 pc_plus_four[31:0] mrd[31:0] aluOut[31:0] 0#32 wdata[31:0] mux4

.ends